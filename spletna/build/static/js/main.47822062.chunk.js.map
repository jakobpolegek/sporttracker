{"version":3,"sources":["firebase.js","Post.js","axios.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","Post","storage","forwardRef","ref","user","username","postId","height","caption","weight","calories_burned","avg_heartrate","time","distance","pot","useEffect","unsubscribe","collection","doc","onSnapshot","snapshot","className","axios","create","baseURL","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","App","classes","useState","copy","modalStyle","posts","setPosts","setUsername","email","setEmail","password","setPassword","setUser","open","setOpen","registerOpen","setRegisterOpen","onAuthStateChanged","authUser","console","log","displayName","updateProfile","where","get","then","docs","forEach","map","id","post","data","Modal","onClose","style","Input","placeholder","type","value","onChange","e","target","Button","onClick","preventDefault","signInWithEmailAndPassword","catch","error","alert","message","createUserWithEmailAndPassword","color","margin","signOut","marginTop","marginLeft","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.47822062.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyBrNS9Y9zKUH3CESiD-Ab5Qw-0O8_Gy47g\",\r\n    authDomain: \"sporttracker-fd60b.firebaseapp.com\",\r\n    projectId: \"sporttracker-fd60b\",\r\n    storageBucket: \"sporttracker-fd60b.appspot.com\",\r\n    messagingSenderId: \"978482245151\",\r\n    appId: \"1:978482245151:web:840c67794c261b6d346f2a\"\r\n});\r\n\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\nexport { db, auth, storage };","import React, { useState, useEffect, forwardRef } from \"react\";\nimport \"./Post.css\";\nimport { db } from \"./firebase\";\nimport firebase from \"firebase\"; \n\nconst Post = forwardRef(\n  ({ user, username, postId, caption, height,weight,calories_burned,avg_heartrate,time,distance,pot}, ref) => {\n    useEffect(() => {\n      let unsubscribe;\n      if (postId) {\n        unsubscribe = db\n          .collection(\"posts\")\n          .doc(postId)\n          .onSnapshot((snapshot) => {\n          });\n      }\n\n      return () => {\n        \n        unsubscribe();\n      };\n    }, [postId]);\n    return (\n      <div className=\"post\" ref={ref}>\n        <div className=\"post__header\">\n        <h3>{username}</h3>\n        </div>\n        <h4 className=\"post__text\">\n          <span className=\"post__caption\"><b>HEIGHT: </b>{height}</span> cm.<br></br>\n          <span className=\"post__caption\"><b>WEIGHT: </b>{weight}</span> kg.<br></br>\n          <span className=\"post__caption\"><b>CALORIES BURNED: </b>{calories_burned}</span><br></br>\n          <span className=\"post__caption\"><b>AVERAGE HEARTRATE: </b>{avg_heartrate}</span><br></br>\n          <div className=\"post__header\"></div>\n            <br></br><b>DURATION: </b>{time} seconds.\n            <br></br><b>DISTANCE: </b>{distance} meters.\n            <br></br><b>PATH:{pot} </b>\n        </h4>\n      </div>\n    );\n  }\n);\n\nexport default Post;\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'http://localhost:8080',\r\n});\r\n\r\nexport default instance;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Post from \"./Post\";\nimport ImageUpload from \"./ImageUpload\";\nimport { db, auth } from \"./firebase\";\nimport { Button, makeStyles, Modal, Input } from \"@material-ui/core\";\nimport FlipMove from \"react-flip-move\";\nimport ReactDOM from 'react-dom';\n  \n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    height: \"300px\",\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: \"absolute\",\n    width: 300,\n    height: 150,\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [copy, setCopy] = useState();\n  const [modalStyle] = useState(getModalStyle);\n  const [posts, setPosts] = useState([]);\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const [open, setOpen] = useState(false);\n  const [registerOpen, setRegisterOpen] = useState(false);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        // user is logged in...\n        console.log(authUser);\n        setUser(authUser);\n\n        if (authUser.displayName) {\n          // dont update username\n        } else {\n          return authUser.updateProfile({\n            displayName: username,\n          });\n        }\n      } else {\n        setUser(null);\n      }\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [user, username]);\n\n  useEffect(() => {\n    const query = db.collection(\"posts\").where('pot','not-in',['null']);\n    query.get().then(snapshot => {\n      snapshot.docs.forEach(doc => {\n        \n        \n      })\n    }) \n    db.collection(\"posts\")\n      .onSnapshot((snapshot) =>\n        setPosts(snapshot.docs.map((doc) => ({ id: doc.id, post: doc.data() })))\n      );\n      //console.log(copy);\n       \n  }, []);\n\n  const handleLogin = (e) => {\n    e.preventDefault();\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .catch((error) => alert(error.message));\n\n    setOpen(false);\n  };\n\n  const handleRegister = (e) => {\n    e.preventDefault();\n    auth\n      .createUserWithEmailAndPassword(email, password)\n      .catch((error) => alert(error.message));\n\n    setRegisterOpen(false);\n  };\n\n  return (\n    \n    <div className=\"app\">\n    {/* Forma za prijavo  */}\n      <Modal open={open} onClose={() => setOpen(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__login\">\n            <Input\n              placeholder=\"E-Pošta\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <Input\n              placeholder=\"Geslo\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Button onClick={handleLogin}>Prijavi me!</Button>\n          </form>\n        </div>\n      </Modal>\n\n      {/* Forma za registracijo  */}\n      <Modal open={registerOpen} onClose={() => setRegisterOpen(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__login\">\n            <Input\n              type=\"text\"\n              placeholder=\"Uporabniško ime\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n            <Input\n              placeholder=\"E-Pošta\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <Input\n              placeholder=\"Geslo\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Button onClick={handleRegister}>Registriraj me!</Button>\n          </form>\n        </div>\n      </Modal>\n\n      <div className=\"app__header\">\n      <div className=\"app__logo\">\n        \n        <h3 style={{color: \"#c1cbd7\",margin: \"40px\"}}>\n        SportTracker</h3>\n        {user?.displayName ? (\n          <div className=\"app_loginHome\">\n            <Button onClick={() => auth.signOut()} style={{color: \"#c1cbd7\",marginTop:\"-100px\",marginLeft:\"140px\"}}>ODJAVA</Button>  \n            </div>\n        ) : (\n          <form className=\"app__loginHome\">\n            <Button onClick={() => setOpen(true)} style={{color: \"#c1cbd7\"}}>PRIJAVA</Button>\n            <Button onClick={() => setRegisterOpen(true)} style={{color: \"#c1cbd7\"}}>REGISTRACIJA</Button>\n          </form>\n        )}\n        </div>\n        </div>\n      <div className=\"app__posts\">\n        <div className=\"app__postsLeft\">\n          <FlipMove>\n            {\n            posts.map(({ id, post }) => (\n              <Post\n                user={user}\n                key={id}\n                postId={id}\n                username={post.username}\n                caption={post.caption}\n                weight={post.weight}\n                height={post.height}\n                calories_burned={post.calories_burned}\n                avg_heartrate={post.avg_heartrate}\n                time={post.time}\n                distance={post.distance}\n                pot={copy}\n              />\n            ))}\n          </FlipMove>\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}